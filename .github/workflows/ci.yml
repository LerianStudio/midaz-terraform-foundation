name: Terraform CI/CD

# Trigger workflow on push to main/develop and PR events
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types:
      - opened      # When PR is created
      - edited      # When PR description/title is edited
      - synchronize # When PR receives new commits
      - reopened    # When PR is reopened

permissions:
  id-token: write       # Needed for authentication
  contents: write       # Needed to create releases and tags
  pull-requests: write  # Needed to create/update PRs

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    # Checkout repository code in PR
    - name: Checkout in PR
      uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0

    # Checkout repository code in push
    - name: Checkout in push
      uses: actions/checkout@v4
      if: github.event_name == 'push'
      with:
        fetch-depth: 0

    # Setup Node.js environment for commitlint
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # Install Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Install TFLint for Terraform linting
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4

    - name: Cache plugin dir
      uses: actions/cache@v4
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    # Ensure commits follow conventional commits specification
    - name: Verify Conventional Commits
      uses: wagoid/commitlint-github-action@v5

    # Check Terraform files formatting
    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    # Initialize Terraform working directories
    - name: Terraform Init
      run: |
        cd examples/gcp/vpc && terraform init -backend=false
        cd ../cloud-dns && terraform init -backend=false
        cd ../cloud-sql && terraform init -backend=false
        cd ../memorystore && terraform init -backend=false
        cd ../gke && terraform init -backend=false
        cd ../../../examples/azure/network && terraform init -backend=false
        cd ../dns && terraform init -backend=false
        cd ../database && terraform init -backend=false
        cd ../redis && terraform init -backend=false
        cd ../aks && terraform init -backend=false

    # Validate Terraform configurations
    - name: Terraform Validate
      run: |
        cd examples/gcp/vpc && terraform validate
        cd ../cloud-dns && terraform validate
        cd ../cloud-sql && terraform validate
        cd ../memorystore && terraform validate
        cd ../gke && terraform validate
        cd ../../../examples/azure/network && terraform validate
        cd ../dns && terraform validate
        cd ../database && terraform validate
        cd ../redis && terraform validate
        cd ../aks && terraform validate

    # Run TFLint on all Terraform files
    - name: Init TFLint
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      run: |
        find . -type f -name "*.tf" -exec dirname {} \; | sort -u | while read dir; do
          echo "Linting $dir"
          (cd "$dir" && tflint)
        done

    # Security scan Terraform code
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0

    # Preview next semantic-release version
    - name: Preview Next Release
      uses: cycjimmy/semantic-release-action@v4
      with:
        ci: false
        dry_run: true
        semantic_version: 23.0.8
        extra_plugins: |
          conventional-changelog-conventionalcommits@v7.0.2
          @saithodev/semantic-release-backmerge
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
        GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
        GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
        GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}

  release:
    needs: validate  # Only run after validation succeeds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch pushes
    steps:
    # Create GitHub App token for better rate limits
    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
        private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

    # Checkout code with full history for versioning
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for semantic versioning
        token: ${{ steps.app-token.outputs.token }}

    # Setup GPG for signed commits and tags
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
        passphrase: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
        git_committer_name: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
        git_committer_email: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    # Setup Node.js for semantic-release
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # Create new release with semantic versioning
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      with:
        ci: false
        semantic_version: 23.0.8
        extra_plugins: |
          conventional-changelog-conventionalcommits@v7.0.2
          @saithodev/semantic-release-backmerge
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
        GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
        GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
        GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}